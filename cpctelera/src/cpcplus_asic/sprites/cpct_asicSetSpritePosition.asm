;;-----------------------------LICENSE NOTICE------------------------------------
;;  This file is part of CPCtelera: An Amstrad CPC Game Engine 
;;  Copyright (C) 2019 Arnaud Bouche (@Arnaud)
;;  Copyright (C) 2019 ronaldo / Fremos / Cheesetea / ByteRealms (@FranGallegoBR)
;;
;;  This program is free software: you can redistribute it and/or modify
;;  it under the terms of the GNU Lesser General Public License as published by
;;  the Free Software Foundation, either version 3 of the License, or
;;  (at your option) any later version.
;;
;;  This program is distributed in the hope that it will be useful,
;;  but WITHOUT ANY WARRANTY; without even the implied warranty of
;;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;  GNU Lesser General Public License for more details.
;;
;;  You should have received a copy of the GNU Lesser General Public License
;;  along with this program.  If not, see <http://www.gnu.org/licenses/>.
;;-------------------------------------------------------------------------------
.module cpct_asic

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Function: 
;;   Set Hardware Sprite at screen coordinates
;;
;; C Definition:
;;    <void> cpct_asicSetSpritePosition(<u8> *hardware_sprite_id*, <i16> *position_x*, <i16> *position_y*) __z88dk_callee;
;;
;; Assembly call:
;;   > call cpct_asicSetSpritePosition_asm
;;
;; Input Parameters (5 Bytes):
;;   (1B A)  hardware_sprite_id - Hardware sprite identifier (0..15)
;;   (2B BC) position_x - Position of sprite in pixels on x axis
;;   (2B DE) position_y - Position of sprite in pixels on y axis
;;
;; Parameter Restrictions:
;;   * *hardware_sprite_id* hardware sprite identifier from 0 to 15
;;   * *position_x* is set in pixels mode 2 resolution from HW_SPRITE_MIN_X (-256) to HW_SPRITE_MAX_X (767)
;;   * *position_y* is set in pixels mode 2 resolution from HW_SPRITE_MIN_Y (-256) to HW_SPRITE_MAX_Y (255)
;;
;; Requirements and limitations:
;;  * The functions *cpct_asicUnlock* and *cpct_asicPageConnect* must be called before using this function.
;;  * The Asic registers are paged from 0x4000 to 0x7FFF *beware* the code located in this area will be hidden.
;;  * Asic page can be disconnected with *cpct_asicPageDisconnect* function to recover code at 0x4000 to 0x7FFF.
;;
;; Details:
;;  The coordinates are in Mode 2 resolution.
;;  The color 0 is the transparency color. 
;;  The sprite is automatically clipped and its background redrawn.
;;
;; Notes:
;;   You can also get pointers to X or Y coordinates with macro *cpctm_getSpriteCoordPtrX* or *cpctm_getSpriteCoordPtrY* to directly update them.
;;   But if you have to update both coordinates this function is faster (37us vs 50us) and you not have to keep pointer variable in memory.
;;
;; Assembly generated by SDCC :
;; (start_code)
;;    ;src/main.c:457: *gMoonPositionX = gEscapeDistance;
;;    ld   hl, (_gMoonPositionX)  ;; [5]
;;    ld   iy, #_gEscapeDistance  ;; [4]
;;    ld   a, 0 (iy)              ;; [5]    
;;    ld   (hl), a                ;; [2]
;;    inc  hl                     ;; [2]
;;    ld   a, 1 (iy)              ;; [5] 
;;    ld   (hl), a                ;; [2]
;;                                ;; [25] Total us
;; (end code)
;;
;; Destroyed Register values: 
;;    AF, BC, DE, HL
;;
;; Required memory:
;;     C-bindings - 20 bytes
;;   ASM-bindings - 14 bytes
;;
;; Time Measures:
;; (start code)
;; Case       | microSecs(us) | CPU Cycles
;; ---------------------------------------
;; Any        |      37       |    148
;; Asm saving |     -17       |    -44
;; ---------------------------------------
;; (end code)
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

   add a, a                      ;; [1] A = A * 8 (Compute offset of 8-Bytes HWSprite configuration)
   add a, a                      ;; [1] |
   add a, a                      ;; [1] |
  
   ld  h, #ASIC_HW_SPRITE_CONFIG ;; [2] HL = HWSprite position address 0x60XX + A
   ld  l, a                      ;; [1] | Note : HL is Byte-aligned
   
   ld (hl), c                    ;; [2] | (HL) = C (Lower Bits of PosX)
   inc l                         ;; [1] | L++
   ld (hl), b                    ;; [2] | (HL) = B (Higher Bits of PosX)
   inc l                         ;; [1] | L++
   
   ld (hl), e                    ;; [2] | (HL) = E (Lower Bits of PosY)
   inc l                         ;; [1] | L++
   ld (hl), d                    ;; [2] | (HL) = D (Higher Bits of PosY)
   
   ret                           ;; [3] Return